{
  "data": [
    {
      "title": "Custom text underlines",
      "description": "Implementing custom CSS text underlines that work with descenders and wrapping.",
      "slug": "custom-text-underlines",
      "date": "Feb 11, 2020",
      "body": "\n\nThe `text-decoration: underline` CSS property provides insufficient control over the underline styling and position. While we wait for the [CSS Text Decoration Module specification](https://www.w3.org/TR/css-text-decor-4/) to become standard, we must rely on custom implementations.\n\nMy favorite approach is to use a `linear-gradient` to create an underline:\n\n```css\nbackground-image: linear-gradient(gray, gray);\nbackground-size: 100% 1px;\nbackground-position: left bottom;\nbackground-repeat: no-repeat;\n```\n\n<div class=\"l\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\n## Position\n\nPosition the underline by changing the vertical value of `background-position`:\n\n```css\nbackground-position: left 1.05em;\n```\n\n<div class=\"l _2\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\n## Descenders\n\nYou'll notice that the underline overlaps the [descenders](https://www.figma.com/dictionary/descender/) of the text. By adding a `text-shadow` with a small offset to the right and left with the color of the background, you can hide the underline around descenders.\n\n```css\ntext-shadow: 0.1em 0 var(--background), -0.1em 0 var(--background);\n```\n\n<div class=\"l _2 _3\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\nRemember to set `text-shadow: none` in your `::selection` rules.\n\n## Weight\n\nChange the height of the background to increase the underline weight:\n\n```css\nbackground-size: 100% 0.25em;\n```\n\n<div class=\"l _4\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\n## Dashes\n\nBy using a `repeating-linear-gradient` and leaving half the gradient transparent, you can customize a dashed underline:\n\n```css\nbackground-image: repeating-linear-gradient(\n  to right,\n  var(--gray) 0%,\n  var(--gray) 50%,\n  transparent 50%,\n  transparent 100%\n);\nbackground-size: 1ch 1px;\n```\n\n<div class=\"l _5\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\nChange the horizontal value of `background-size` to modify the dash width:\n\n```css\nbackground-size: 5ch 1px;\n```\n\n<div class=\"l _5 _6\">\n  <div>\n    <span>Day by day, what you do is what you become.</span>\n  </div>\n</div>\n\nThe `ch` unit is equal to the width of the \"0\" glyph in the current font, which can be useful for natural alignment.\n\n## Wrapping\n\nLastly, this approach also supports multi-line text:\n\n<div class=\"l\">\n  <div>\n    <span>Day by day,<br /> what you do is what you become.</span>\n  </div>\n</div>\n\n[Let me know](https://twitter.com/pacocoursey) if you end up using this, or read more about other approaches in \"[Crafting link underlines on Medium.](https://medium.design/crafting-link-underlines-on-medium-7c03a9274f9)\"\n\n---\n\nThanks to [Franco](https://twitter.com/arzafran) for reminding me about this technique!\n\n<style>\n\n.l {\n  background: var(--lighter-gray);\n  width: 100%;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: var(--radius);\n  font-size: 1.25rem;\n  color: var(--fg);\n  text-align: center;\n}\n\n.l span {\n  background-image: linear-gradient(var(--gray), var(--gray));\n  background-size: 100% 1px;\n  background-position: left bottom;\n  background-repeat: no-repeat;\n}\n\n.l._2 span {\n  background-position: left 1.05em;\n}\n\n.l._3 span {\n  text-shadow: 0.1em 0 var(--lighter-gray), -0.1em 0 var(--lighter-gray);\n}\n\n.l._4 span {\n  background-size: 100% 0.25em;\n}\n\n.l._5 span {\n  background: repeating-linear-gradient(\n    to right,\n    var(--gray) 0%,\n    var(--gray) 50%,\n    transparent 50%,\n    transparent 100%\n  );\n  background-repeat: repeat-x;\n  background-size: 1ch 1px;\n  background-position: bottom left;\n}\n\n\n.l._6 span {\n  background-size: 2ch 1px;\n}\n</style>\n"
    },
    {
      "title": "Thoughtless",
      "description": "I have trouble falling asleep. Thoughtless is an experiment to help.",
      "slug": "be-thoughtless",
      "date": "January 21, 2020",
      "body": "\n\nI have trouble falling asleep. Too many ideas and thoughts from a day with too little activity, I suspect. Writing down my thoughts helps me clear my mind.\n\n[Thoughtless](https://thoughtless.now.sh) is an experiment, created on a sleepless night, to help me note my thoughts without interruption.\n\nBy making each typed word disappear, there is no overediting or obsessing over sentence structure. Record your raw thoughts — no going back.\n\nWhen you finish, copy and paste your writing somewhere safe and sleep well.\n"
    },
    {
      "title": "Styled System with styled-jsx",
      "description": "styled-jsx-system is a way to use Styled System with styled-jsx.",
      "slug": "styled-jsx-system",
      "date": "Dec 21, 2019",
      "og": true,
      "body": "\n\n[Styled System](https://styled-system.com/) is an excellent alternative to writing ad-hoc `style` declarations in your React components. By giving components standardized props like `bg` and `fontSize`, it's easier to build custom UI that respects your system constraints. That's because you can quickly specify your design tokens and use them in real code:\n\n```js\n// theme.js\ncolors: {\n  blue: '#0070F3'\n}\n\n// your React code\n<Box color=\"blue\" />\n```\n\nStyled System's responsive syntax is impressively concise, too:\n\n```js\n// 16px on mobile, 14px on tablet, 12px on desktop\n<Box fontSize={[16, 14, 12]} />\n```\n\nThese two features make it extremely easy to scaffold new components.\n\nI want to use Styled System with [styled-jsx](https://github.com/zeit/styled-jsx), because styled-jsx is included with [Next.js](https://github.com/zeit/next.js), and I use Next.js for everything React. But all the Styled System tooling I found was for styled-components or Emotion, so I made my own.\n\n## styled-jsx-system\n\n[styled-jsx-system](https://github.com/pacocoursey/styled-jsx-system) lets you use Styled System with styled-jsx.\n\n```bash\n$ yarn add styled-jsx-system\n```\n\nWrap your components with the provided HOC and accept a `className` prop:\n\n```js\nimport withStyledSystem from 'styled-jsx-system'\nimport { color } from 'styled-system'\n\nconst Box = ({ className, children }) => {\n  return (\n    <div className={className}>\n      {children}\n\n      <style jsx>{`\n        div {\n          padding: 8px;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default withStyledSystem(Box, [color])\n```\n\nThat's it! You can now use Styled System props with your Box component:\n\n```js\n<Box color={['#000', '#666', '#fff']}>Hello</Box>\n```\n\nOther Styled System features like compose, system, and themeing are supported too. Check out the [repository](https://github.com/pacocoursey/styled-jsx-system) for more information.\n\nCool. [Let me know](https://twitter.com/pacocoursey) if you end up using it.\n\n---\n\nThanks to [jxnblk](https://twitter.com/jxnblk) for Styled System and all his cool CSS experiments, and thanks to [Giuseppe](https://twitter.com/giuseppegurgone), [JJ](https://twitter.com/_ijjk), and [Shu](https://twitter.com/shuding_) for help with compiling and publishing!\n"
    },
    {
      "title": "Write it down",
      "description": "My crappy superpower is solving difficult problems as I'm falling asleep.",
      "slug": "write-it-down",
      "date": "Nov 19, 2019",
      "body": "\n\nMy crappy superpower is solving difficult problems as I'm falling asleep. Doesn't sound too bad, right? Here's the catch: I always convince myself I don't need to write the solution down.\n\nIt's 1:18 AM. I just figured it out. The answer is so simple, I can't believe it took me this long. Do I blind myself opening my phone to write it down? No, I can finally sleep now! There's no way I'll forget.\n\n\nIt's 8:32 AM. I can't believe I've done this again.\n\n---\n\nI have a new policy: **write it down.** Every single time. No matter if the idea comes to me in the shower, the middle of a dream, or in a conversation.\n\nMost of my ideas are bad. But this way I'll never miss an opportunity.\n"
    },
    {
      "title": "On Gaming",
      "description": "A favorite quote from an old friend.",
      "slug": "on-gaming",
      "date": "Nov 16, 2019",
      "body": "\n\nA favorite quote from an old friend.\n\n<blockquote>\n\nI really admire that there are people of all ages that are able to get along, without awkwardness, without serious fighting, and share a common interest, whilst in completely different parts of the world.\n\nI mean, isn't it just amazing that we all have a different background, a different upbringing, a different future, and yet we all united at this point in time to share an interest, as futile as it may seem, and be passionate about it?\n\n**What a life!**\n\n— Giles\n</blockquote>\n"
    },
    {
      "title": "Ideas",
      "slug": "ideas",
      "date": "Nov 4, 2019",
      "hidden": true,
      "body": "\n\n## Code\n\n- [x] MDX implementation using marked, custom HTML tags, and \\[data\\] attributes\n- [x] styled-system HOC for use with styled-jsx\n- [x] Writing app that turns off the screen\n- [ ] GUI for plain JSON databases using lowdb (`dead` - Dead Easy Array Databases)\n- [ ] spotlight-like password manager with good keybinds\n- [ ] Music gathering site, combines all other services to centralize a playlist (http://song.link/)\n- [ ] Storytelling using Command+F to jump between occurences\n- [ ] Deploy DB as a static file and use ISSG\n- [ ] Client side OG image generator\n- [ ] Update homepage to use SSG\n\n## Blog\n\n- [ ] The scroll position effect on /blog\n- [ ] Introduction to mechanical keyboards\n- [x] Write it down\n- [ ] Improved Structure Procrastination\n- [x] Thoughts on gaming\n- [ ] Instrinsic value and pursuit of popularity\n- [ ] A decent popover\n- [ ] Ghost Mouse\n- [ ] Temporal Navigation\n- [ ] A taste of Mercury\n"
    },
    {
      "title": "Good Writers",
      "description": "Have you noticed that some people write extremely well?",
      "slug": "good-writers",
      "date": "October 24, 2019",
      "body": "\n\nHave you noticed that some people write extremely well? Take Aaron Swartz' article [\"Believe you can change\"](http://www.aaronsw.com/weblog/dweck):\n\n> Carol Dweck was obsessed with failure.\n\nWhat an _amazing_ first sentence. I'm immediately glued to this article. Who is Carol Dweck? What's wrong with her?\n\nIf I were writing that, I'd start with the immediately boring:\n\n> Carol Dweck is a Professor of Psychology at Stanford, studying the behavior of children and how they deal with failure.\n\nBecause I have a lot of practice writing in this dull manner that meets school requirements. But I'm already bored reading it.\n\nI'm learning to recognize good writing, and I'm fascinated. We all use the same set of words, but some writers are so much better at using them.\n"
    },
    {
      "title": "Creative Output",
      "description": "I am consistently unhappy with my creative output.",
      "slug": "creative",
      "date": "August 19, 2019",
      "body": "\n\nI am consistently unhappy with my creative output. My job title includes designer, but I'm not good at designing something from scratch.\n\nNone of work I create matches up to the work of designers that I admire. At a minimum, I want to feel more comfortable designing work that meets my own minimum expectations of quality. [Impostor Syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome) probably plays a big part (especially working with such talented colleagues!) but maybe I simply need practice.\n\nCreativity is not my strong suit. I'm logical. Building on past experience to improve future work is something I am good at. Creating something new is not. That's why it feels like everything I create is a remix of my past work, or the work of others.\n\nDoes this still count as _my_ creative output, though? I'd argue that anything new in design is just old stuff reworked in new ways. Buried in sarcasm, [Mark Dalgleish](https://twitter.com/markdalgleish/status/1084256955961466881) explains that step in the design process:\n\n> If you're a developer who finds design difficult, you're probably skipping the \"inspiration\" phase—which, in non-designer speak, roughly translates to \"look at other designs and rip off all the good ideas\".\n\nThis is a totally valid way to work. It's probably the most efficient. You're not the first person working on your problems, so use what other people have already discovered. But to what degree can we claim this work as our own?\n"
    },
    {
      "title": "Persistent Custom App Icons",
      "description": "Make your custom macOS application icons persistent across app restarts.",
      "slug": "persistent-icons",
      "date": "March 30, 2019",
      "body": "\n\nI created [Dusk](https://dusk.now.sh) to make my dock look more visually harmonious. [LiteIcon](https://freemacsoft.net/liteicon/) does a great job of automating the icon changing process, but every time I opened Discord, the dock icon reverted back to default. Not cool.\n\n![Original Discord Icon in Dock](https://paco.im/blog/persistent-icons/dock-1.png)\n\nIt happens to other Electron applications (Hyper, VSCode) over time. Even Safari reverts back occasionally. It's frustratingly ugly. Let's fix it.\n\nFind the application in Finder and right click to \"Show Package Contents\".\n\n![Show Package Contents on Discord.app](https://paco.im/blog/persistent-icons/show.png)\n\n\nNavigate to `Contents/Resources/`. Here, `electron.icns` is the culprit. Let's replace it with our custom icon.\n\n![electron.icns in Contents/Resources Folder](https://paco.im/blog/persistent-icons/icns.png)\n\nWe'll need to convert our custom `.png` icon from Dusk (or anywhere else) to an `.icns` file. MacOS ships with the command line tool `sips` to help with this.\n\nRun the following from the command line, replacing ICON as needed.\n\n```bash\nsips -s format icns ICON.png --out ICON.icns\n```\n\nMove your new `.icns` file into the previously opened `Resources/` folder. I like to save the old icon by renaming it, just in case I have to revert later. Rename your new file to match the old (in this case, `electron.icns`).\n\n![New electron.icns File](https://paco.im/blog/persistent-icons/fixed-icns.png)\n\nRestart the app, and your custom application icon should persist!\n\n![Much better](https://paco.im/blog/persistent-icons/dock-2.png)\n"
    },
    {
      "title": "Understanding package.json",
      "description": "How to work with scripts in your package.json",
      "slug": "understanding-package-json",
      "date": "March 11, 2019",
      "body": "\n\nI began my Computer Science degree with an intensive introduction course in C. We used makefiles to compile and run each of our assignments.\n\nWhen I started learning modern web development in early 2018, I had no idea what Node.js or NPM was. My idea of building website involved writing HTML, CSS, and occasionally including a `script` tag. A year or so later, I'm finally comfortable with modern techniques.\n\nA major source of confusion for me was `package.json`. In short, `package.json` is a makefile for the JavaScript environment, with some caveats.\n\n### Package Scripts\n\nPackage managers like Yarn and NPM also serve as script runners for JavaScript projects. Unlike makefiles, scripts in `package.json` run in a special environment.\n\nPackages in `node_modules` that define an executable will have that executable appended to the environment PATH before running any scripts. This can be confusing. Let's see an example:\n\n```json\n\"devDependencies\": {\n  \"eslint\": \"1.0.0\"\n},\n\"scripts\": {\n  \"lint\": \"eslint .\"\n}\n```\n\nRunning `yarn lint` will work correctly. However, just running `eslint .` from the command line will fail!<sup>1</sup> This was extremely confusing at first, did I have  ESLint installed or not?\n\nThe package script will work because Yarn recognizes that the ESLint dependency includes an executable, and appends it to the environment PATH when running any scripts.\n\nThis is a great advantage of the modular nature of the JavaScript ecosystem. You don't have to install any global scripts or clutter up your PATH to work with JavaScript projects, just `yarn install`.\n\n---\n\n1. Unless you have installed ESLint globally, which does add the executable to your PATH (`yarn global add eslint`)\n"
    }
  ]
}